FOR NEXT UPDATE:
[x] Add floating widgets.
  [x] Get rid of min, max, and ratio constraints,they don't really make any sense in conjunction with the length constraint.
  [x] Use forward propagation in order to figure out where to spawn the widget.
  [x] Add Widget defined floating Widgets.
  [x] Add Tag defined floating Widgets.
  [x] Extend regular Widget functions to floating Widgets.
[x] Rename File to Buffer.
[/] Make Handles not a Parameter.
[x] No more U arguments, plugins will now use duat instead of duat-core.
  [/] Gut duat-core, so that it only defines the Ui/Area traits and the text and form modules.
  [/] Move everything else to duat.
  [x] Make use of a generic Area for Handles.
    [x] Make Ui and Area dyn compatible.
    [~] Move some of the more intensive calculations (like Text vertical movement) to the Area trait.
    [ ] Possibly get rid of printed iterators?
    [ ] Add the ability to query the Area if it is a specific implementation.
  [/] Don't have duat(lib) depend on a specific Ui, have duat(bin) send a type erased Ui to it.
  [/] No plugins on duat(lib)
    [/] Make all default plugins into default config crate dependencies.
    [/] Create a setup_no_default_plugins in order to circumvent them.
[/] Set title for better performance apparently (???).
[x] Get rid of AreaId.
[ ] Add completion lists.
[x] Remembering at which Moment the Text was saved.
[x] Create a jumplist.
[x] Rework Parsers (again).
[x] Make the Regular mode more usable.
[x] New Parser API.
[x] Make TreeSitter and MatchPairs default plugins.
[x] More sophisticated Plugin API.
[x] Fix the Windows version.
[x] Superior thread counting method.
[x] Start using clap.
[x] Handle non printable code points.
[x] Finish new parser documentation.
[x] Simplify Widget API.
[/] Get rid of WidgetCreated (that's right).
[x] Get rid of the various Cfgs.
[x] Add convenience methods for the duat-utils Widgets.
[x] Rename duat-utils to duat-base.
[x] Get rid of NewLine, WrapMethod.
[x] Make Windows public.
[x] RwArea, ErasedArea.
[x] Perfect parts iterator.
[x] PartialEq on Hookables.
[x] HookBuilder struct.
[x] Hook::add_for/add_grouped_for/add_once_for.
[x] Make all Ui and Area methods use the address space of the Duat app.
[x] Finalize the Windows API for more public use.
[x] Easier pattern matching for Modes.
[ ] extra_word_chars, rather than WordChars.

KNOWN BUGS:
[ ] Sometimes empty Texts are being created somehow.
[x] Print iteration sometimes loops forever.
[x] Spawned Areas not resizing until moving up or down.
[ ] Window not switching properly.
[ ] Perfect print iterators.
  [ ] Perfect words iterator.
[ ] track_area not actually tracking correctly.
[ ] tree-sitter-duat-text is not being used.
[ ] Locking a Mutex on every Change is surely slow.
[ ] std::mem::replace (grrrr...).
[ ] Tree-sitter still hangs while loading injected languages, it would be easy to prevent that.
[ ] Aliases turn lines wrapped in the LineNumbers eyes.
[ ] First Point not updating when there are changes before the start of the screen.
[ ] Removing a bunch of injections at the same time seems to freak treesitter out.

FUTURE UPDATES:
[ ] Get started on a Vim mode.
[ ] Create a fun lil' spinner.
[ ] Named StatusParts.
[ ] OptsParser for the Buffer.
[ ] Named colors.
[ ] Turn the History into a tree.
[ ] Remove requirement of Clone on Modes.
[ ] Get rid of Widget::needs_update?
[ ] Get rid of print function from Widgets, implement LineNumbers through a Parser.
[ ] Coordinates based tagging.
[ ] Use track_caller on TextBuilder.
[ ] Anonymous Forms, which index based on hashing the Form itself.ap
[ ] Add Form interpolation and Form::copy.
[ ] Use Tags for masks.
[ ] Keep information of PushSpecs and SpawnSpecs on the Handles.
[ ] Initial installation configuration menu.
[ ] Print only changed lines.
[ ] Handle mostly utf-8 strings.
[ ] Allow Modes to detect when a key is mapped.
[ ] Add a failure mode for remapping.
[/] Bring back multithreading?
[ ] Abuse the shit out of catch_unwind.
[ ] Additive Forms.
[ ] Remapping on `Mode` creation.
[x] Use the FileCfg insted of OnFileOpen.
[ ] FileBuilder::push_detached!
[ ] ReplaceCell Tags!
[ ] Split suggested max range by conceals.
[ ] A MapForm Tag!
[ ] macro_mode! or something like that.
[ ] Fuzzy path detection should be rule based, not on what buffers are open.
[ ] A cache for visual lines (ðŸ¤®).
[ ] rustc_on_unimplemented for State.
[ ] External file tracking.
[ ] Crumple zone tags (?).
[ ] Document print.rs (jesus christ man)
[ ] Custom error messages for unimplemented on status!.
[ ] It is technically possible to reverse iterate without going over the whole line, if you know where in the screen said line ends.
[ ] add options to the build script, about which type of UI you want, and where to get your config files.
[ ] general undo/redo, that can delete/create files.
[ ] ghosts ðŸ‘» on doc comments for tests.
[ ] mouse drag binding to resize widgets.
[ ] adaptive widget size.
[ ] transition the ranges system to 4 lists.
[ ] Least common denominator for showing paths.
[ ] An updater function that returns true if a certain hook was triggered.
[ ] File statics.
[ ] No wrapping Tag.
[ ] Search bar widget that shows up when you hover over a tooltip.
[ ] Go to reference should popup a list of references, while swapping the whole screen as you scroll.
[ ] Completion lists should have automatic triggers.
[ ] Compilation should automatically plug plugins.
[ ] Completion/hover panels should allow you to press tab to go to the next element and search for it.
[ ] fixed_file and dyn_file should only call for updates if the File has actually changed at all.
[ ] LSP option to show function arguments only when parenthesis is typed.
[ ] Use the format-like modif to modify forms on the fly.
[ ] `m` key could act on additional pairs if cursor is in specific chars.
[ ] Option to show colored text on the txt! macro.

PERFORMANCE IDEAS:
[ ] Try not iterating over every character in scroll_vertically.

